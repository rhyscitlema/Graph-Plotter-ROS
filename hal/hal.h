/****************************************************************************
    hal.h
    Hardware Abstraction Layer Interface for i86 architecture

    The Hardware Abstraction Layer (HAL) provides an abstract interface
    to control the basic motherboard hardware devices. This is accomplished
    by abstracting hardware dependencies behind this interface.
****************************************************************************/
#ifndef _HAL_H
#define _HAL_H


#include <_stdint.h>


extern  void hal_initialise ();      // initialise hardware abstraction layer

extern  void hal_shutdown ();        // shutdown hardware abstraction layer

extern  void hal_restart ();        // restart hardware abstraction layer

extern  void enable_ints ();         // enable hardware device interrupts

extern  void disable_ints ();        // disable hardware device interrupts

extern  uint8b inportb (uint16b port_id);  // read from hardware device port

extern  void outportb (uint16b portid, uint8b value); // write byte to hardware port

extern void delayABit();            // delay a bit

// enable interrupt request
extern  void enable_irq(uint8b irq);

// set new interrupt vector
extern  void  install_i_handler (int32b intno, FUNCTION handler );

// return current interrupt at interrupt vector
extern	FUNCTION get_i_handler (int32b intno);

// notify hal that the interrupt is done
extern  void interruptdone (uint32b intno);

// generate interrupt
//extern  void geninterrupt (int32b n);


extern  void sound (unsigned frequency);    // generate sound

extern  void hal_fault (const char* fault);   // print message due to hal failure



#define ASM_START_I_HANDLER \
    _asm pushad             \
    _asm push ds            \
    _asm push es            \
    _asm push fs            \
    _asm push gs            \

#define ASM_STOP_I_HANDLER  \
    _asm pop	gs          \
    _asm pop	fs          \
    _asm pop	es          \
    _asm pop	ds          \
    _asm popad              \
    _asm add esp, 12        \
    _asm iretd
/*  note: line "add esp, 12" depends on
    how the code was compiled.
    see .asm code generated by compiler.
*/


#endif
