/****************************************************************************
    hal.h
    Hardware Abstraction Layer Interface for i86 architecture

    The Hardware Abstraction Layer (HAL) provides an abstract interface
    to control the basic motherboard hardware devices. This is accomplished
    by abstracting hardware dependencies behind this interface.
****************************************************************************/
#ifndef _HAL_H
#define _HAL_H


#include "_stdint.h"


extern  void hal_initialise ();      // initialise hardware abstraction layer

extern  void hal_shutdown ();        // shutdown hardware abstraction layer

extern  void hal_restart ();        // restart hardware abstraction layer

extern  void enable_ints ();         // enable hardware device interrupts

extern  void disable_ints ();        // disable hardware device interrupts

extern  uint8b inportb (uint16b port_id);  // read from hardware device port

extern  void outportb (uint16b portid, uint8b value); // write byte to hardware port

extern void delayABit();            // delay a bit

// enable interrupt request
extern  void enable_irq(uint8b irq);

// set new interrupt vector
extern  void  install_i_handler (int32b intno, FUNCTION handler );

// return current interrupt at interrupt vector
extern	FUNCTION get_i_handler (int32b intno);

// notify hal that the interrupt is done
extern  void interruptdone (uint32b intno);

// generate interrupt
//extern  void geninterrupt (int32b n);


extern  void sound (unsigned frequency);    // generate sound

extern  void hal_fault (const char* fault);   // print message due to hal failure



#ifdef _MSC_VER
#define ASM_BEG _asm{
#define ASM(...) __VA_ARGS__
#define ASM_END }
#else
#define ASM_BEG  asm(".intel_syntax noprefix\n");
#define ASM(...) asm(#__VA_ARGS__);
#define ASM_END  asm(".att_syntax noprefix\n");
#endif

#define ASM_START_I_HANDLER \
    ASM_BEG                 \
    ASM(pushad)             \
    ASM(push ds)            \
    ASM(push es)            \
    ASM(push fs)            \
    ASM(push gs)            \
    ASM_END

#define ASM_STOP_I_HANDLER  \
    ASM_BEG                 \
    ASM(pop gs)             \
    ASM(pop fs)             \
    ASM(pop es)             \
    ASM(pop ds)             \
    ASM(popad)              \
    ASM(add esp, 12)        \
    ASM(iretd)              \
    ASM_END

/*  Note: line "add esp, 12" depends on
    how the code was compiled. See the
    .asm code generated by compiler.
*/


#endif
